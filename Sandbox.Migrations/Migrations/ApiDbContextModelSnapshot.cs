// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sandbox.Modules.CustomerManagement.Data;

#nullable disable

namespace Sandbox.ApiService.Migrations.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CustomerManagement")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Sandbox.Modules.CustomerManagement.Domain.Customer.Name#FullName", b1 =>
                        {
                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Customers", "CustomerManagement");
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Sandbox.Modules.CustomerManagement.Domain.CustomerAddress.Address#Address", b1 =>
                        {
                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");
                        });

                    b.HasKey("Id");

                    b.ToTable("CustomerAddresses", "CustomerManagement");

                    b.HasDiscriminator<string>("AddressType").HasValue("CustomerAddress");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.CustomerBillingAddress", b =>
                {
                    b.HasBaseType("Sandbox.Modules.CustomerManagement.Domain.CustomerAddress");

                    b.HasIndex("CustomerId");

                    b.HasDiscriminator().HasValue("Billing");
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.CustomerShippingAddress", b =>
                {
                    b.HasBaseType("Sandbox.Modules.CustomerManagement.Domain.CustomerAddress");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CustomerId");

                    b.HasDiscriminator().HasValue("Shipping");
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.CustomerBillingAddress", b =>
                {
                    b.HasOne("Sandbox.Modules.CustomerManagement.Domain.Customer", null)
                        .WithMany("BillingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.CustomerShippingAddress", b =>
                {
                    b.HasOne("Sandbox.Modules.CustomerManagement.Domain.Customer", null)
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sandbox.Modules.CustomerManagement.Domain.Customer", b =>
                {
                    b.Navigation("BillingAddresses");

                    b.Navigation("ShippingAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
